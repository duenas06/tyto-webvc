[{"C:\\dev\\agora-gc-master\\src\\index.js":"1","C:\\dev\\agora-gc-master\\src\\App.js":"2","C:\\dev\\agora-gc-master\\src\\GlobalContext.js":"3"},{"size":219,"mtime":1616577516000,"results":"4","hashOfConfig":"5"},{"size":5812,"mtime":1635297374958,"results":"6","hashOfConfig":"5"},{"size":1961,"mtime":1634990018837,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"jssobl",{"filePath":"11","messages":"12","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\dev\\agora-gc-master\\src\\index.js",[],["16","17"],"C:\\dev\\agora-gc-master\\src\\App.js",["18","19","20","21","22","23","24","25"],"import { useState, useRef, useEffect } from 'react'\nimport AgoraRTC from \"agora-rtc-sdk-ng\"\nimport { GlobalProvider, useClient, useStart, useUsers, useAppID, useChannel, useToken } from './GlobalContext';\n\nexport default function App() {\n  return (\n    <GlobalProvider>\n      <Content />\n    </GlobalProvider>\n  );\n}\n\nconst Content = () => {\n  const setUsers = useUsers()[1]\n  const [start, setStart] = useStart()\n  const rtc = useClient()\n  const options = {\n    // Pass your app ID here.\n    appId: \"cd305ea814d54bdf87aa48ffe4af8363\",\n    // Set the channel name.\n    channel: \"TYTO\",\n    // Pass a token of App Certificate.\n    token:  \"006cd305ea814d54bdf87aa48ffe4af8363IABNp+ndP59n73J14dg8cISNJFHE4aETJ6Ffct7T0NJSOIeW8j4AAAAAEACHtvL/bet3YQEAAQBr63dh\",\n  };\n\n  let init = async (name, appId, token) => {\n    rtc.current.client = AgoraRTC.createClient({ mode: \"rtc\", codec: \"vp8\" });\n    initClientEvents()\n    const uid = await rtc.current.client.join(appId, name, token, null);\n    // Create an audio track from the audio sampled by a microphone.\n    rtc.current.localAudioTrack = await AgoraRTC.createMicrophoneAudioTrack();\n    // Create a video track from the video captured by a camera.\n    rtc.current.localVideoTrack = await AgoraRTC.createCameraVideoTrack();\n    //Adding a User to the Users State\n    setUsers((prevUsers) => {\n      return [...prevUsers, { uid: uid, audio: true, video: true, client: true, videoTrack: rtc.current.localVideoTrack }]\n    })\n    //Publishing your Streams\n    await rtc.current.client.publish([rtc.current.localAudioTrack, rtc.current.localVideoTrack]);\n    setStart(true)\n  }\n\n\n\n\n  const initClientEvents = () => {\n    rtc.current.client.on(\"user-published\", async (user, mediaType) => {\n      // New User Enters\n      await rtc.current.client.subscribe(user, mediaType);\n\n      if (mediaType === \"video\") {\n        const remoteVideoTrack = user.videoTrack;\n        setUsers((prevUsers) => {\n          return [...prevUsers, { uid: user.uid, audio: user.hasAudio, video: user.hasVideo, client: false, videoTrack: remoteVideoTrack }]\n\n        })\n      }\n\n      if (mediaType === \"audio\") {\n        const remoteAudioTrack = user.audioTrack;\n        remoteAudioTrack.play();\n        setUsers((prevUsers) => {\n          return (prevUsers.map((User) => {\n            if (User.uid === user.uid) {\n              return { ...User, audio: user.hasAudio }\n            }\n            return User\n          }))\n\n        })\n      }\n    });\n\n    rtc.current.client.on(\"user-unpublished\", (user, type) => {\n      //User Leaves\n      if (type === 'audio') {\n        setUsers(prevUsers => {\n          return (prevUsers.map((User) => {\n            if (User.uid === user.uid) {\n              return { ...User, audio: !User.audio }\n            }\n            return User\n          }))\n        })\n      }\n      if (type === 'video') {\n        setUsers((prevUsers) => {\n          return prevUsers.filter(User => User.uid !== user.uid)\n        })\n      }\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      {start && <Videos />}\n      {!start && <ChannelForm initFunc={init} />}\n    </div>\n  )\n}\n\n\nconst Videos = () => {\n\n  const users = useUsers()[0]\n\n  return (\n    <div id='videos'>\n      {users.length && users.map((user) => <Video key={user.uid} user={user} />)}\n    </div>\n  )\n\n}\n\nexport const Video = ({ user }) => {\n\n  const vidDiv = useRef(null)\n\n  const playVideo = () => {\n    user.videoTrack.play(vidDiv.current)\n  }\n\n  const stopVideo = () => {\n    user.videoTrack.stop()\n  }\n\n  useEffect(() => {\n    playVideo()\n    return () => {\n      stopVideo()\n    }\n  // eslint-disable-next-line\n  }, [])\n\n  return (\n    <div className='vid' ref={vidDiv} >\n      <Controls user={user} />\n    </div>\n  )\n}\n\n\nexport const Controls = ({ user }) => {\n\n  const setStart = useStart()[1]\n  const setUsers = useUsers()[1]\n  const rtc = useClient()\n\n  const leaveChannel = async () => {\n    // Destroy the local audio and video tracks.\n    await rtc.current.localAudioTrack.close();\n    await rtc.current.localVideoTrack.close();\n    await rtc.current.client.leave();\n    setUsers([])\n    setStart(false)\n  }\n\n  const mute = (type, id) => {\n    if (type === 'audio') {\n      setUsers(prevUsers => {\n        return (prevUsers.map((user) => {\n          if (user.uid === id) {\n            user.client && rtc.current.localAudioTrack.setEnabled(!user.audio)\n            return { ...user, audio: !user.audio }\n          }\n          return user\n        }))\n      })\n    }\n    else if (type === 'video') {\n      setUsers(prevUsers => {\n        return prevUsers.map((user) => {\n          if (user.uid === id) {\n            user.client && rtc.current.localVideoTrack.setEnabled(!user.video)\n            return { ...user, video: !user.video }\n          }\n          return user\n        })\n      })\n    }\n  }\n\n  return (\n    <div className='controls'>\n      {<p className={user.audio ? 'on' : ''} onClick={() => user.client && mute('audio', user.uid)}>Mic</p>}\n      {<p className={user.video ? 'on' : ''} onClick={() => user.client && mute('video', user.uid)}>Video</p>}\n      {user.client && <p onClick={() => leaveChannel()}>Quit</p>}\n    </div>\n  )\n}\n\n\nconst ChannelForm = ({ initFunc }) => {\n\n  const [appId, setAppId] = useAppID();\n  const [token, setToken] = useToken();\n  const [channelName, setChannelName] = useChannel();\n  const options = {\n    // Pass your app ID here.\n    appId: \"cd305ea814d54bdf87aa48ffe4af8363\",\n    // Set the channel name.\n    channel: \"TYTO\",\n\n    token:  \"006cd305ea814d54bdf87aa48ffe4af8363IABPLBvX1t12kXfflA0x4FflH9iSiiWben0dm7a/fdS7oYeW8j4AAAAAEACHtvL/wPl5YQEAAQC/+Xlh\"\n  };\n  return (\n    <form className='join'>\n      <button onClick={(e) => { e.preventDefault(); initFunc(options.channel, options.appId, options.token);}}>Join Call</button>\n    </form>\n  );\n\n}\n\n\n\n","C:\\dev\\agora-gc-master\\src\\GlobalContext.js",[],{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":1,"column":10,"nodeType":"32","messageId":"33","endLine":1,"endColumn":18},{"ruleId":"30","severity":1,"message":"34","line":17,"column":9,"nodeType":"32","messageId":"33","endLine":17,"endColumn":16},{"ruleId":"30","severity":1,"message":"35","line":195,"column":10,"nodeType":"32","messageId":"33","endLine":195,"endColumn":15},{"ruleId":"30","severity":1,"message":"36","line":195,"column":17,"nodeType":"32","messageId":"33","endLine":195,"endColumn":25},{"ruleId":"30","severity":1,"message":"37","line":196,"column":10,"nodeType":"32","messageId":"33","endLine":196,"endColumn":15},{"ruleId":"30","severity":1,"message":"38","line":196,"column":17,"nodeType":"32","messageId":"33","endLine":196,"endColumn":25},{"ruleId":"30","severity":1,"message":"39","line":197,"column":10,"nodeType":"32","messageId":"33","endLine":197,"endColumn":21},{"ruleId":"30","severity":1,"message":"40","line":197,"column":23,"nodeType":"32","messageId":"33","endLine":197,"endColumn":37},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'options' is assigned a value but never used.","'appId' is assigned a value but never used.","'setAppId' is assigned a value but never used.","'token' is assigned a value but never used.","'setToken' is assigned a value but never used.","'channelName' is assigned a value but never used.","'setChannelName' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]